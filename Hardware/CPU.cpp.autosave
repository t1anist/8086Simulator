#include "CPU.h"

CPUs::CPUs(QString cpuName){
    T=50;
    if(cpuName == nullptr){
        cpuName = "CPU_"+QString::number(c.howMany());
    }
    setHardwareName(cpuName);
    //init pin's voltage
    for(int i=0;i<CPU_PIN_NUM;i++){
        pins[i]=inf;
    }
}

/****************************************************
 - Function：获取寄存器的值
 - Calls：
 - Called By：
        + getRegValue(MicroCom::Regs reg, short pos)
 - Input：8086CPU内部寄存器号(reg)
 - Return：寄存器的值（类型：unsigned short）
*****************************************************/
unsigned short CPUs::getRegValue(MicroCom::Regs reg){
    if( reg >= MicroCom::ax && reg < MicroCom::al ){
        return innerReg[reg];
    }
    else{
        if(reg >=MicroCom::al && reg<=MicroCom::dl){
            return (innerReg[reg] & 0x00ff);
        }
        else{
            return (innerReg[reg] >> 8);
        }
    }
}

/****************************************************
 - Function：获取数据线的值
 - Calls：
 - Called By：
        + getRegValue(MicroCom::Regs reg,short pos)
 - Input：寄存器的长度（8位or16位）
 - Return：数据线表示的值（类型：unsigned short）
*****************************************************/
unsigned short CPUs::getDataValue(MicroCom::RegsLen len){
    qDebug()<<"START GET DATA";
    unsigned short rst=0;
    int value[DATANUM] ={0};
    int numlen = static_cast<int>(len);
    for(int i=0;i<numlen;i++){
        (pins[i]==low)?value[i]=0:value[i]=1;
    }
    rst = toDenary(value);
    qDebug()<<"DATA IS"<<rst;
    return rst;
}

/****************************************************
 - Function：get the register's value in a particular position
 - Description：pos limit(16-bit:0-15 8-bit:0-7)
 - Calls：
        + Voltage getRegValue(MicroCom::Regs reg)
 - Called By：
 - Input：[MicroCom::Regs]
 - Output：register value with complement form
 - Return：Voltage value of the reg's selected pos
*****************************************************/
int CPUs::getRegValue(MicroCom::Regs reg, int pos){
    unsigned short flag = 1;
    flag <<= pos;
    unsigned short rst = getRegValue(reg);
    if((rst & flag)>0){
        return 1;
    }
    else{
        return 0;
    }
}

/****************************************************
 - Function：set the register's value
 - Description：the value is a signed number
 - Calls：
 - Called By：
 - Input：[MicroCom::Regs]
 - Output：
 - Return：
*****************************************************/
void CPUs::setRegValue(MicroCom::Regs reg, short value){
    if(reg>=MicroCom::ax && reg<=MicroCom::di){
        innerReg[reg] = toCompForm(value);
    }
    else{
        unsigned short cValue = toCompForm(value,MicroCom::byte);
        if( reg>=MicroCom::al && reg<=MicroCom::dl){
            innerReg[reg] &= 0xff00;
        }
        else{
            innerReg[reg] &= 0x00ff;
            cValue <<= 8;
        }
        innerReg[reg] |= cValue;
    }
}

/****************************************************
 - Function：set the register's value
 - Description：the value is a unsigned number
 - Calls：
 - Called By：
 - Input：[MicroCom::Regs]
 - Output：
 - Return：
*****************************************************/
void CPUs::setRegUnsignedValue(MicroCom::Regs reg, unsigned short value){
    if( reg >= MicroCom::ax && reg < MicroCom::al ){
        innerReg[reg] = value;
    }
    else{
        if(reg>=MicroCom::al && reg<=MicroCom::dl){
            innerReg[reg] &= 0xff00;
        }
        else{
            innerReg[reg] &= 0x00ff;
            value <<= 8;
        }
        innerReg[reg] |= value;
    }
}

/****************************************************
 - Function：设置寄存器某一位的值
 - Description：位限制(16-bit:0-15 8-bit:0-7)
 - Calls：
 - Called By：
 - Input：[MicroCom::Regs]
 - Output：
 - Return：
*****************************************************/
void CPUs::setRegValue(MicroCom::Regs reg, Voltage biValue, int pos){
    unsigned short flag = 0;
    unsigned short temp = 1;
    if(biValue==high){
        flag = 1;
    }
    //Registers excluding ah, bh, ch and dh
    if(reg>=MicroCom::ax && reg<MicroCom::ah){
        flag <<= pos;
        temp <<= pos;
    }
    //ah, bh, ch or dh
    else{
        flag <<= (pos+8);
        temp <<= (pos+8);
    }
    temp = ~temp;
    innerReg[reg] &= temp;
    innerReg[reg] |= flag;
}

/****************************************************
 - Function：设置地址线
 - Input：20位地址变量（addr）
 - Return：
*****************************************************/
void CPUs::setAddrPinsVoltage(int addr){
    int binary[ADDRNUM] = {0};
    toBinary(addr,binary);
    for(int i=0;i<ADDRNUM;i++){
        (binary[i])?pins[i]=high:pins[i]=low;
        emit pinVolChanged(static_cast<MicroCom::Pins>(i));
    }
    delaymsec(T);
}

/****************************************************
 - Function：写入数据线
 - Input：数据值（unsigned short）
 - Return：
*****************************************************/
void CPUs::setDataPinsVoltage(unsigned short data){
    int binary[DATANUM] = {0};
    toBinary(data,binary);
    for(int i=0;i<DATANUM;i++){
        (binary[i])?pins[i]=high:pins[i]=low;
        emit pinVolChanged(static_cast<MicroCom::Pins>(i));
    }
    delaymsec(T);
}

/****************************************************
 - Function：读总线周期操作时序
 - Input：20位地址变量（addr）,模式（Memory or IO）
 - Output：地址对应的存储单元或IO端口的值
*****************************************************/
unsigned short CPUs::readBusCycle(int phyAddr, bool isMemory){
    address = phyAddr;
    qDebug()<<"========READ BUS CYCLE===========";
    /** ==============T1 START================**/
    //  1.Mio 读存储器则为高电平，读IO则为低电平（整个周期有效）
    //  2.AD1~AD16、AS17~AS20 输出地址
    //  3.bhe 输出低电平表示有效
    //  4.ALE 是一个正脉冲（地址锁存信号有效）
    //  5.DTr 为低电平，（用来改变双向缓冲器的数据传输方向，改变缓冲器的DIR）
    //  6.延时半周期后，ALE 变为低电平
    qDebug()<<"============T1 start=============";
    qDebug()<<"now start to change address lins";
    if(isMemory){
        setPinVoltage(MicroCom::CP_Mio,high);
    }
    else{
        setPinVoltage(MicroCom::CP_Mio,low);
    }
    setAddrPinsVoltage(address);
    setPinVoltage(MicroCom::CP_bhe,low);
    setPinVoltage(MicroCom::CP_ALE,high);
    setPinVoltage(MicroCom::CP_DTr,low);
    delaymsec(T);
    qDebug()<<"============T1 HALF=============";
    setPinVoltage(MicroCom::CP_ALE,low);
    qDebug()<<"============T1 END =============";

    /** ==============T2 START================**/
    //  1.AD1~AD16 变为高阻态（无意义）
    //  2.rd  在后半周期变为低电平，表示允许读取（rd变低意味着数据到达数据线上）
    //  3.den 在后半周期变为低电平，表示数据有效，用来实现缓冲器的选通（den变低意味着数据从缓冲器到达CPU数据线）
    //  4.bhe 变为高电平

    delaymsec(2*T);
    qDebug()<<"============T2 START=============";
    setPinVoltage(MicroCom::CP_rd,low);
    setPinVoltage(MicroCom::CP_bhe,high);
    delaymsec(T);
    qDebug()<<"============T2 HALF=============";
    setPinVoltage(MicroCom::CP_den,low);
    qDebug()<<"============T2 END=============";

    /** ==============T3 START================**/
    //  1.AD1~AD16 接受数据（从数据线上接收数据）
    delaymsec(2*T);
    qDebug()<<"============T3 START============";
    data = getDataValue();
    qDebug()<<"============T3 END=============";

    /** ==============T4 START================**/
    //  1.AD1~AD16 变为高阻态
    //  2.den 变为高电平
    //  3.rd  变为高电平
    delaymsec(2*T);
    qDebug()<<"============T4 START============";
    for(int i=0;i<20;i++){
        pins[i]=inf;
    }
    setPinVoltage(MicroCom::CP_rd,high);
    setPinVoltage(MicroCom::CP_den,high);
    qDebug()<<"============T4 END=============";
    return data;
}

/****************************************************
 - Function：写总线周期操作时序
 - Input：20位地址变量（addr）,数据值（value），模式（Memory or IO）
 - Output：数据送入数据线，并通过缓冲器送入存储器或IO
*****************************************************/
void CPUs::writeBusCycle(int phyAddr, unsigned short value, bool isMemory){
    address = phyAddr;
    qDebug()<<"========WRITE BUS CYCLE===========";
    /** ==============T1 START================**/
    //  1.Mio 读存储器则为高电平，读IO则为低电平（整个周期有效）
    //  2.AD1~AD16、AS17~AS20 输出地址
    //  3.bhe 输出低电平表示高8位有效
    //  4.ALE 是一个正脉冲（地址锁存信号有效）
    //  5.DTr 为高电平，（用来改变双向缓冲器的数据传输方向，改变缓冲器的DIR）
    //  6.延时半周期后，ALE 变为低电平
    qDebug()<<"============T1 start=============";
    qDebug()<<"now start to change address lins";
    if(isMemory){
        setPinVoltage(MicroCom::CP_Mio,high);
    }
    else{
        setPinVoltage(MicroCom::CP_Mio,low);
    }
    setAddrPinsVoltage(address);
    setPinVoltage(MicroCom::CP_bhe,low);
    setPinVoltage(MicroCom::CP_ALE,high);
    setPinVoltage(MicroCom::CP_DTr,high);
    delaymsec(T);
    qDebug()<<"============T1 HALF=============";
    setPinVoltage(MicroCom::CP_ALE,low);
    qDebug()<<"============T1 END =============";

    /** ==============T2 START================**/
    //  1.AD1~AD16 输出数据
    //  2.den 变为低电平，表示数据有效，用来实现缓冲器的选通（den变低意味着数据从CPU到达缓冲器）
    //  3.wr  在后半周期变为低电平，表示允许写入（rd变低意味着数据从缓冲器到达存储器或IO端口）
    //  4.bhe 变为高电平
    delaymsec(2*T);
    setDataPinsVoltage(value);
    qDebug()<<"============T2 START=============";
    setPinVoltage(MicroCom::CP_den,low);
    setPinVoltage(MicroCom::CP_bhe,high);
    delaymsec(T);
    qDebug()<<"============T2 HALF=============";
    setPinVoltage(MicroCom::CP_wr,low);
    qDebug()<<"============T2 END=============";

    /** ==============T3 START================**/
    delaymsec(2*T);
    qDebug()<<"============T3 START============";
    qDebug()<<"============T3 END=============";

    /** ==============T4 START================**/
    //  1.AD1~AD16 变为高阻态
    //  2.den 变为高电平
    //  3.wr  变为高电平
    delaymsec(2*T);
    qDebug()<<"============T4 START============";
    for(int i=0;i<ADDRNUM;i++){
        setPinVoltage(static_cast<MicroCom::Pins>(i),inf);
    }
    setPinVoltage(MicroCom::CP_wr,high);
    setPinVoltage(MicroCom::CP_den,high);
    qDebug()<<"============T4 END=============";
    return;
}

//设置引脚电平并发送信号
void CPUs::setPinVoltage(MicroCom::Pins pin, Voltage value){
    pins[pin]=value;
    emit pinVolChanged(pin);
}

//处理来自外部的电平变化
void CPUs::handlePinVolChanges(MicroCom::Pins pin, Voltage value){
    pins[pin]=value;
    if(pin==MicroCom::CP_RESET && value==high){
        resetCPU();
    }
}

Voltage CPUs::getPinVoltage(MicroCom::Pins pin){
    return pins[pin];
}

/****************************************************
 - Function：8086CPU复位
 - Calls：
    + void CPUs::setPinVoltage(MicroCom::Pins pin, Voltage value)
 - Called By：
 - Input：
 - return：
*****************************************************/
void CPUs::resetCPU(){
    qDebug()<<"====================";
    qDebug()<<"====RESET START!====";
    qDebug()<<"====================";
    /** set registers' value **/
    innerReg[MicroCom::flags]=0;
    innerReg[MicroCom::cs]=0;
    innerReg[MicroCom::ip]=0;
    innerReg[MicroCom::ds]=0;
    innerReg[MicroCom::es]=0;
    innerReg[MicroCom::ss]=0;
    /** set pins' value **/
    for(int i=0;i<ADDRNUM;i++){
        pins[i]=inf;
    }
    setPinVoltage(MicroCom::CP_ALE,low);
    //inta 高电平后呈高阻
    setPinVoltage(MicroCom::CP_inta,high);
    delaymsec(T);
    setPinVoltage(MicroCom::CP_inta,inf);
    //rd 高电平后呈高阻
    setPinVoltage(MicroCom::CP_rd,high);
    delaymsec(T);
    setPinVoltage(MicroCom::CP_rd,inf);
    //wr 高电平后呈高阻
    setPinVoltage(MicroCom::CP_wr,high);
    delaymsec(T);
    setPinVoltage(MicroCom::CP_wr,inf);
    //Mio 高电平后呈高阻
    setPinVoltage(MicroCom::CP_Mio,high);
    delaymsec(T);
    setPinVoltage(MicroCom::CP_Mio,inf);
    //DTr 高电平后呈高阻
    setPinVoltage(MicroCom::CP_DTr,high);
    delaymsec(T);
    setPinVoltage(MicroCom::CP_DTr,inf);
    //den 高电平后呈高阻
    setPinVoltage(MicroCom::CP_den,high);
    delaymsec(T);
    setPinVoltage(MicroCom::CP_den,inf);
    //RESET引脚复位
    pins[MicroCom::CP_RESET]=low;
    qDebug()<<"====================";
    qDebug()<<"===RESET SUCCEES!===";
    qDebug()<<"====================";
    return;
}

//判断是否为奇数
bool CPUs::isOdd(int i){
    return (i&1) == 1;
}


